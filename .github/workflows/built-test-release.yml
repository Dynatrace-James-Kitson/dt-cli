name: Build Test Release
on:
  # Pull request trigger works only for PRs into main branch
  pull_request:
    branches:
      - main
  # Push works for pushes into every branch of the repo
  push:

jobs:
  build-dev-docker-image:
    name: Build development docker image
    #
    # Builds development docker image and tags it with Commit SHA.
    # Pushes the image to GitHub image registry.
    #
    # This docker image is essential for all other steps. It is used
    # for testing, building, publishing, etc.
    #
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Authenticate in GitHub docker registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull latest cached docker image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest || true

      - name: Build docker image
        run: |
          docker build \
            --tag docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            --cache-from docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest \
            .

      - name: Push image to GitHub docker registry
        run: |
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

  release-dev-docker-image:
    name: Release development docker image
    #
    # Releases development image as official development image by tagging
    # it as "latest".
    #
    # Only happens when PR is merged into main or when something is pushed
    # into main branch.
    #
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - uses: actions/checkout@v2

      - name: Authenticate in GitHub docker registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull latest cached docker image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

      - name: Tag image with release tag
        run: |
          docker tag \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest

      - name: Push release tag to GitHub registry
        run: |
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest

  run-tests:
    name: Run tests
    #
    # Runs all tests using development image.
    # - pytest:   tests
    # - mypy:     typing
    # - flake8:   linter
    # - coverage: test coverage %
    #
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Authenticate in GitHub docker registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull latest cached docker image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

      - name: Run pytest tests
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            poetry run pytest

      - name: Run mypy tests
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            poetry run pytest --mypy dtcli --strict || true

      - name: Run flake8 lint checker
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            poetry run flake8 || true

      - name: Run test coverage report
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            poetry run pytest --cov . --cov-report html || true

  build-package:
    name: Build package
    #
    # Builds python package using poetry.
    #
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v2

      - name: Authenticate in GitHub docker registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Pull latest cached docker image
        run: |
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

      - name: Build package
        run: |
          docker run \
            -v "$(pwd):/app" \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            poetry build

      - name: Cache built package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: |
            dist/*

  build-linux-binary:
    name: Build linux binary
    #
    # Builds linux binary using pyinstaller.
    #
    runs-on: ubuntu-16.04
    needs: run-tests
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: "x64"

      - name: Install poetry
        run: |
          pip install poetry

      - name: Install virtual environment
        run: |
          poetry install

      - name: Build binary distribution
        run: |
          poetry run pyinstaller \
            dtcli/scripts/dt.py \
              --name dt \
              --clean \
              -p "$(poetry env info -p)/lib/python3.9/site-packages" \
              --onefile

      - name: Cache built linux binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: |
            dist/dt

  github-release:
    name: Create GitHub release
    #
    # Creates GitHub release with binaries and packages.
    #
    # Only happens for tags.
    #
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build-package
      - build-linux-binary
    steps:
      - name: Download cached build artifacts
        uses: actions/download-artifact@v2

      - name: Show all artifacts
        run: |
          ls -R

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            LICENSE
          body: |
            Test release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
